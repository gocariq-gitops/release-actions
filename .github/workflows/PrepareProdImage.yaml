name: Prepare Release Image
permissions: write-all

on:
  workflow_call:
    inputs:
      project_id:
        default: 'gocariq-platform'
        type: string
      app_name:
        required: true
        type: string
      docker_registry_name:
        description: "Docker Registry Name"
        default: 'cariq'
        type: string
      release_candidate_branch:
        default: 'release-candidate'
        type: string

    secrets:
      GCP_SA_GHA_IMAGEPUSH:
        required: true
      GHA_DEVOPS_DISPATCH:
        required: true
jobs:
  check-image:
    runs-on: ubuntu-22.04
    steps:
      - name: Pull request Validation
        id: PR_Validation
        if: ${{ inputs.release_candidate_branch != '' && github.head_ref != inputs.release_candidate_branch && github.base_ref == 'main' && github.event_name == 'pull_request' }}
        shell: bash
        run: |
            echo "Pull request to the Main branch was not created from the '${{ inputs.release_candidate_branch }}' branch. Failing the pipeline..."
            exit 1

      - name: Workflow dispatch Validation
        id: WD_Validation
        if: ${{ github.ref != 'refs/heads/main' && github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
            echo "You can RUN the pipeline only from the main branch. Failing the pipeline..."
            exit 1

      - name: Check out repository
        id: CheckOut
        uses: actions/checkout@master
        with:
          fetch-depth: 2

      - name: Check workflow runs
        id: check_workflow_runs
        env:
          GITHUB_TOKEN: ${{secrets.GHA_DEVOPS_DISPATCH}}
        shell: bash
        run: |
          sleep 5
          for number in {1..10}
          do
            output=$(gh run list -L 5 --workflow BuildAndDeploy.yaml)
            if echo "$output" | grep -q "in_progress"; then
              echo "Status of BuildAndDeploy.yaml pipeline is running. Rechecking in 1 min..."
              sleep 60
            else
              echo "Status: not running. Done."
              break
            fi
          done

      - name: Check if PR to main
        if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
        id: git_pr_source_branch_sha
        shell: bash
        run: |
          set -x
          GIT_PR_SOURCE_BRANCH_SHA=$(git log -n 1 |grep "Merge:\s*\d*\s*\d*" | awk "{print \$3}")
          echo "GIT_PR_SOURCE_BRANCH_SHA=${GIT_PR_SOURCE_BRANCH_SHA}" >> $GITHUB_ENV

      - name: Detect current application version
        id: detect_current_app_version
        uses: gocariq-gitops/release-actions/actionDetectCurrentAppVersion@v2
        with:
          docker_image_tag: "${{ env.GIT_PR_SOURCE_BRANCH_SHA }}"

      - name: 'Authenticate to Google Cloud'
        id: GCPAuth
        uses: gocariq-gitops/release-actions/actionGCPAuth@v2
        with:
          google_credentials: ${{ secrets.GCP_SA_GHA_IMAGEPUSH }}
          google_project_id: ${{ inputs.project_id }}

      - name: Checking the availability of the image
        id: ImageCheck
        uses: gocariq-gitops/release-actions/actionCheckDockerImage@v2
        with:
          google_project_id: ${{ inputs.project_id }}
          docker_registry_name: ${{ inputs.docker_registry_name }}
          docker_image_name: ${{ inputs.app_name }}
          docker_image_tag: ${{env.CURRENT_APP_VERSION}}

      - name: Stop if the image doesn't exist
        id: CheckImage
        if: ${{ env.IMAGE_EXIST == 'false' }}
        shell: bash
        run: |
            echo "The image does not exist in Dev Repo. Stopping Pipeline."
            exit 1

      - name: Export ENV variables
        id: export_env_vars
        shell: bash
        run: |
          set -x
          echo "IMAGE_PATH=${{ env.IMAGE_PATH }}" >> $GITHUB_OUTPUT
          echo "CURRENT_IMAGE=${{ env.CURRENT_IMAGE }}" >> $GITHUB_OUTPUT
          echo "CURRENT_APP_VERSION=${{ env.CURRENT_APP_VERSION }}" >> $GITHUB_OUTPUT

    outputs:
      CURRENT_APP_VERSION: "${{ steps.export_env_vars.outputs.CURRENT_APP_VERSION }}"
      IMAGE_PATH: "${{ steps.export_env_vars.outputs.IMAGE_PATH }}"
      CURRENT_IMAGE: "${{ steps.export_env_vars.outputs.CURRENT_IMAGE }}"

  # run on pull_request to main only
  check-int-deployment:
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    needs:
      - check-image
    runs-on: ubuntu-22.04
    steps:
      - name: Validate INT environment
        id: Validate_INT_Environment
        uses: gocariq-gitops/release-actions/actionServiceIsDeployed@v2
        with:
          token: ${{ secrets.GHA_DEVOPS_DISPATCH }}
          app_name: ${{ inputs.app_name }}
          env_name: int
          expected_git_tag: "${{ needs.check-image.outputs.CURRENT_APP_VERSION }}"
          on_not_deployed_stop: "true"

  # run on pull_request to main only
  check-stage-deployment:
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    needs:
      - check-image
    runs-on: ubuntu-22.04
    steps:
      - name: Validate STAGE environment
        id: Validate_STAGE_Environment
        uses: gocariq-gitops/release-actions/actionServiceIsDeployed@v2
        with:
          token: ${{ secrets.GHA_DEVOPS_DISPATCH }}
          app_name: ${{ inputs.app_name }}
          env_name: stage
          expected_git_tag: "${{ needs.check-image.outputs.CURRENT_APP_VERSION }}"
          on_not_deployed_stop: "true"

  # run on merge to main only
  prepare-prod-image:
    runs-on: ubuntu-22.04
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}

    needs:
      - check-image
    steps:
      - name: Check out repository
        id: CheckOut
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: 'Authenticate to Google Cloud'
        id: GCPAuth
        uses: gocariq-gitops/release-actions/actionGCPAuth@v2
        with:
          google_credentials: ${{ secrets.GCP_SA_GHA_IMAGEPUSH }}
          google_project_id: ${{ inputs.project_id }}

      - name: Docker Auth
        id: Docker_Auth
        shell: bash
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      - name: Get Next Version
        id: Get_PROD_version
        shell: bash
        run: |
          NEXT_VERSION=$(docker run --rm -v $(pwd):/app -w /app --entrypoint "" us-docker.pkg.dev/gocariq-platform/cariq/semver-helper \
              sh -c "git config --global --add safe.directory /app && semver-helper --next-ver")
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          if [[ -z $(git tag -l |grep "${NEXT_VERSION}") ]]; then
            git tag ${NEXT_VERSION}
            git push --tags
          else
            echo ""
            echo "It seems you have re-run this job, git tag '${NEXT_VERSION}' already exists."
            echo "NOTE: This run doesn't bring any changes."
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Create PROD version of Image
        id: Create_PROD_version
        shell: bash
        run: |
          set -x

          CURRENT_IMAGE="${{ needs.check-image.outputs.CURRENT_IMAGE }}"
          IMAGE_PATH="${{ needs.check-image.outputs.IMAGE_PATH }}"
          echo "Update microservice version '${CURRENT_IMAGE}' -> '${{ env.NEXT_VERSION }}'"
          NEW_IMAGE_PATH="${IMAGE_PATH}:${{ env.NEXT_VERSION }}"
          echo "new image - $NEW_IMAGE_PATH"
          docker pull ${CURRENT_IMAGE}
          docker tag ${CURRENT_IMAGE} $NEW_IMAGE_PATH
          docker push $NEW_IMAGE_PATH
