name: "Check Docker Image"
description: "Check if docker image exists"

inputs:
  google_project_id:
    description: "Google Project Id"
    required: true
  docker_image_name:
    description: "Docker Image Name"
    required: true
  docker_image_tag:
    description: "Docker Image Name"
    default: ""
    required: false
  docker_registry_name:
    default: "carig"
    description: "Docker Registry Name"
    required: true
  registry_host:
    default: "us-docker.pkg.dev"
    description: "Docker registry path"
  version_null_prefix:
    default: "0.0.0-"
    description: "Null version prefix is used for not versioned builds with git sha, to make it SemVer 2 compatible and looks like 0.0.0-abcdef0"

runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        echo "google_project_id - ${{inputs.google_project_id}}"
        echo "docker_registry_name - ${{inputs.docker_registry_name}}"
        echo "docker_image_name - ${{inputs.docker_image_name}}"
        echo "docker_image_tag - ${{inputs.docker_image_tag}}"

    - name: Docker Auth with gCloud CLI
      shell: bash
      run: |
        gcloud auth configure-docker ${{ inputs.registry_host }}

    - name: check docker image
      shell: bash
      run: |
        set -x

        # Set variables                      
        IMAGE_FULL_PATH="${{ inputs.registry_host }}/${{inputs.google_project_id}}/${{inputs.docker_registry_name}}/${{inputs.docker_image_name}}:${{ inputs.docker_image_tag }}"
        echo "Checking docker image $IMAGE_FULL_PATH"
        echo "IMAGE_FULL_PATH='${IMAGE_FULL_PATH}'"

        if gcloud container images describe $IMAGE_FULL_PATH >/dev/null 2>&1; then
          IMAGE_EXIST="true"
        else
          IMAGE_EXIST="false"
        fi
        echo "IMAGE_EXIST=$IMAGE_EXIST"

        # Export env variables
        echo "IMAGE_EXIST=$IMAGE_EXIST" >> $GITHUB_ENV
        echo "IMAGE_PATH=${{ inputs.registry_host }}/${{inputs.google_project_id}}/${{inputs.docker_registry_name}}/${{inputs.docker_image_name}}" >> $GITHUB_ENV
        echo "CURRENT_IMAGE=$IMAGE_FULL_PATH" >> $GITHUB_ENV
