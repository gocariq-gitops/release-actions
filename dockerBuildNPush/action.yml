name: "Docker Build and Push"
description: "Build Docker image and Push to GCR"

inputs:
  google_credentials:
    description: "Google Credentials"
    required: true
  google_project_id:
    description: "Google Project Id"
    required: true
  docker_file_path:
    description: "Docker File Path"
    required: true
  docker_image_name:
    description: "Docker Image Name"
    required: true
  docker_repo_name:
    description: "Docker Repo Name"
    required: true
  docker_params:
    description: "Docker build params"
  docker_build_kit:
    default: "1"
    description: "Build kit some images are not building with 1"
  generate-gcp-general-secret:
    default: "false"
    description: "Generate gcp-general.json file to be able to build some applications"
  generate-gcp-pypi-secret:
    default: "false"
    description: "Generate gcp-pypi.json file to be able to build some applications"
  gcp-sa-project-accessor:
    default: ""
    description: "GCP_SA_PROJECT_ACCESSOR secret for gcp-pypi.json generation to able to build some applications"
    required: false

runs:
  using: "composite"
  steps:

      # TODO - All applications should be updated to read GCP credentials from environment variable
      - name: Save credentials for build steps for python packages
        if: ${{ inputs.generate-gcp-pypi-secret == 'true' }}
        shell: bash
        env:
          GCP_SA_GHA_IMAGEPUSH: ${{ inputs.google_credentials }}
        run: |          
          echo "$GCP_SA_GHA_IMAGEPUSH" >> gcp-pypi.json

      - name: Setup secrets for build steps for some images
        if: ${{ inputs.generate-gcp-general-secret == 'true' }}
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{env.PROJECT_ID}}
          service_account_key: ${{ inputs.gcp-sa-project-accessor }}
      - name: Save credentials for build steps for some images
        if: ${{ inputs.generate-gcp-general-secret == 'true' }}
        shell: bash
        env:
          GCP_SA_GHA_IMAGEPUSH: ${{inputs.google_credentials}}
        run: |
          gcloud secrets versions access latest \
          --secret=k8s-pod-deploy-JSON_KEY  \
          --format='get(payload.data)' | tr '_-' '/+' | base64 -d > \
          gcp-general.json
      # TODO - All applications should be updated to read GCP credentials from environment variable ^^^

      - name: gcp auth
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{inputs.google_project_id}}
          service_account_key: ${{inputs.google_credentials}}
      - name: Docker Auth with gCloud CLI
        shell: bash
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      - name: Building docker containers
        shell: bash
        run: |
          set -x
          
          # GITHUB_HEAD_REF is set only for PRs
          if [[ -n $GITHUB_HEAD_REF ]]; then
            GITHUB_SHA=${{github.event.pull_request.head.sha}}
          fi
          echo "GITHUB_SHA=$GITHUB_SHA"
          export SHORT_SHA=${GITHUB_SHA:0:7}
          export REPO_URL="us-docker.pkg.dev"
          export REPO_NAME=${{inputs.docker_repo_name}}
          export IMAGE_NAME=${{inputs.docker_image_name}}
          export IMAGE_TAG=$SHORT_SHA
          export PROJECT_ID=${{inputs.google_project_id}}

          export IMAGE1="$IMAGE_NAME:$IMAGE_TAG"
          export IMAGE2="$IMAGE_NAME:latest"
          export IMAGE_FULL_PATH1="$REPO_URL/$PROJECT_ID/$REPO_NAME/${IMAGE1}"
          export IMAGE_FULL_PATH2="$REPO_URL/$PROJECT_ID/$REPO_NAME/${IMAGE2}"

          # Check image exist in the registry
          set +e
          docker manifest inspect ${IMAGE_FULL_PATH1} > /dev/null
          IMAGE_EXISTS=$?
          set -e
          if [[ "${IMAGE_EXISTS}" == "0" ]]; then
            echo "Image already exists."
            echo "DOCKER PUSH IS SKIPPED"
            exit 1
          fi

          echo "Building docker image $IMAGE1 and $IMAGE2"
          
          cd ${{inputs.docker_file_path}}
          DOCKER_BUILDKIT=${{inputs.docker_build_kit}} docker build ${{inputs.docker_params}} -t "$IMAGE1" -t "$IMAGE2" .
          cd -

          # Push image if it does not exist in the registry
          echo "Push docker image"
          docker tag $IMAGE1 $IMAGE_FULL_PATH1
          docker tag $IMAGE2 $IMAGE_FULL_PATH2
          docker push $IMAGE_FULL_PATH1
          docker push $IMAGE_FULL_PATH2
